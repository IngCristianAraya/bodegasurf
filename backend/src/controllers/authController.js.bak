import { StatusCodes } from 'http-status-codes';
import mongoose from 'mongoose';
import User from '../models/User.js';
import { generateToken } from '../utils/jwt.js';
import JWT_CONFIG from '../config/jwt.js';

/**
 * Custom error class for application errors
 */
class AppError extends Error {
  /**
   * @param {string} message - Error message
   * @param {number} statusCode - HTTP status code
   * @param {string} code - Application-specific error code
   */
  constructor(message, statusCode = StatusCodes.INTERNAL_SERVER_ERROR, code = 'INTERNAL_SERVER_ERROR') {
    super(message);
    this.statusCode = statusCode;
    this.code = code;
    this.isOperational = true;
    Error.captureStackTrace(this, this.constructor);
  }
}

// Configurar el modelo de usuario
const UserModel = mongoose.models.User || User;

// Deshabilitar temporalmente la verificación de tipos para UserModel
// @ts-ignore
const UserModelWithTypes = UserModel;

/**
 * @typedef {import('express').Request} Request
 * @typedef {import('express').Response} Response
 * @typedef {import('express').NextFunction} NextFunction
 */

/**
 * @desc    Registrar un nuevo usuario
 * @route   POST /api/auth/register
 * @access  Public
 */
/**
 * @param {Request} req
 * @param {Response} res
 * @param {NextFunction} next
 */
const register = async (req, res, next) => {
  try {
    console.log('=== INICIO DEL MÉTODO REGISTER ===');
    console.log('Headers de la solicitud:', JSON.stringify(req.headers, null, 2));
    console.log('Content-Type:', req.get('Content-Type'));
    
    // Verificar si el cuerpo de la solicitud está vacío o no es un objeto
    if (!req.body || typeof req.body !== 'object' || Object.keys(req.body).length === 0) {
      throw new AppError(
        'El cuerpo de la solicitud no puede estar vacío y debe ser un JSON válido',
        StatusCodes.BAD_REQUEST,
        'INVALID_REQUEST_BODY'
      );
    }
    
    // Extraer campos del cuerpo de la solicitud con valores por defecto
    const { 
      name = '', 
      email = '', 
      password = '', 
      role = 'user', 
      tenantId = null 
    } = req.body;

    // Validar campos requeridos
    if (!name || !email || !password) {
      throw new AppError(
        'Por favor proporcione nombre, correo electrónico y contraseña',
        StatusCodes.BAD_REQUEST,
        'MISSING_REQUIRED_FIELDS'
      );
    }
    
    // Validar formato de correo electrónico
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      throw new AppError(
        'Por favor proporcione un correo electrónico válido',
        StatusCodes.BAD_REQUEST,
        'INVALID_EMAIL_FORMAT'
      );
    }
    
    // Validar fortaleza de la contraseña
    if (password.length < 6) {
      throw new AppError(
        'La contraseña debe tener al menos 6 caracteres',
        StatusCodes.BAD_REQUEST,
        'WEAK_PASSWORD'
      );
    }

    console.log('Datos extraídos del cuerpo:', JSON.stringify({ 
      name: name ? 'presente' : 'ausente',
      email: email ? 'presente' : 'ausente',
      password: password ? 'presente' : 'ausente',
      role,
      tenantId
    }, null, 2));

    // Validar que el nombre no esté vacío después del trim
    if (name.trim() === '') {
      throw new AppError(
        'El nombre no puede estar vacío',
        StatusCodes.BAD_REQUEST,
        'INVALID_NAME'
      );
    }

    // Validar que el correo electrónico no esté vacío después del trim
    if (email.trim() === '') {
      throw new AppError(
        'El correo electrónico no puede estar vacío',
        StatusCodes.BAD_REQUEST,
        'INVALID_EMAIL'
      );
    }

    // Validar que la contraseña no esté vacía después del trim
    if (password.trim() === '') {
      throw new AppError(
        'La contraseña no puede estar vacía',
        StatusCodes.BAD_REQUEST,
        'INVALID_PASSWORD'
      );
    }

    // Verificar si el usuario ya existe
    const userExists = await UserModel.findOne({ email });
    if (userExists) {
      throw new AppError(
        'El correo electrónico ya está en uso',
        StatusCodes.CONFLICT,
        'EMAIL_ALREADY_EXISTS'
      );
    }

    // Crear usuario
    const user = await UserModelWithTypes.create({
      name,
      email,
      password,
      role: role || 'user',
      tenantId,
      isActive: true
    });

    // Crear token
    const token = generateToken(user._id, user.tenantId, user.role);

    // Configurar cookie
    const cookieOptions = {
      expires: new Date(
        Date.now() + (process.env.JWT_COOKIE_EXPIRE || 30) * 24 * 60 * 60 * 1000
      ),
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
    };

    // Enviar respuesta
    res
      .status(StatusCodes.CREATED)
      .cookie('token', token, cookieOptions)
      .json({
        success: true,
        token,
        user: {
          id: user._id,
          name: user.name,
          email: user.email,
          role: user.role,
          tenantId: user.tenantId,
        },
      });
  } catch (error) {
    next(error);
  }
};

/**
 * @desc    Iniciar sesión
 * @route   POST /api/auth/login
 * @access  Public
 */
const login = async (req, res, next) => {
  try {
    const { email, password } = req.body;

    // Verificar email y contraseña
    const user = await UserModelWithTypes.findOne({ email }).select('+password');
    
    if (!user || !(await user.matchPassword(password))) {
      return res.status(StatusCodes.UNAUTHORIZED).json({
        success: false,
        message: 'Credenciales inválidas',
      });
    }

    // Verificar si el usuario está activo
    if (!user.isActive) {
      return res.status(StatusCodes.UNAUTHORIZED).json({
        success: false,
        message: 'Cuenta desactivada. Contacte al administrador.',
      });
    }

    // Crear token
    const token = generateToken(user._id, user.tenantId, user.role);

    // Configurar cookie
    const cookieOptions = {
      expires: new Date(
        Date.now() + (process.env.JWT_COOKIE_EXPIRE || 30) * 24 * 60 * 60 * 1000
      ),
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
    };

    // Enviar respuesta
    res.status(StatusCodes.OK).cookie('token', token, cookieOptions).json({
      success: true,
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
        tenantId: user.tenantId,
      },
    });
  } catch (error) {
    next(error);
  }
};

/**
 * @desc    Cerrar sesión / Limpiar cookie
 * @route   GET /api/auth/logout
 * @access  Private
 */
const logout = (req, res) => {
  res.cookie('token', 'none', {
    expires: new Date(Date.now() + 10 * 1000),
    httpOnly: true,
  });

  res.status(StatusCodes.OK).json({
    success: true,
    data: {},
  });
};

/**
 * @desc    Obtener usuario actual
 * @route   GET /api/auth/me
 * @access  Private
 */
const getMe = async (req, res, next) => {
  try {
    const user = await UserModelWithTypes.findById(req.user.id);

    res.status(StatusCodes.OK).json({
      success: true,
      data: user,
    });
  } catch (error) {
    next(error);
  }
};

/**
 * @desc    Actualizar detalles del usuario
 * @route   PUT /api/auth/updatedetails
 * @access  Private
 */
const updateDetails = async (req, res, next) => {
  try {
    const { name, email } = req.body;

    const user = await UserModelWithTypes.findByIdAndUpdate(
      req.user.id,
      { name, email },
      {
        new: true,
        runValidators: true,
      }
    );

    res.status(StatusCodes.OK).json({
      success: true,
      data: user,
    });
  } catch (error) {
    next(error);
  }
};

/**
 * @desc    Actualizar contraseña
 * @route   PUT /api/auth/updatepassword
 * @access  Private
 */
const updatePassword = async (req, res, next) => {
  try {
    const user = await UserModelWithTypes.findById(req.user.id).select('+password');

    // Verificar contraseña actual
    if (!(await user.matchPassword(req.body.currentPassword))) {
      return res.status(StatusCodes.UNAUTHORIZED).json({
        success: false,
        message: 'La contraseña actual es incorrecta',
      });
    }

    user.password = req.body.newPassword;
    await user.save();

    // Crear token
    const token = generateToken(user._id, user.tenantId, user.role);

    res.status(StatusCodes.OK).json({
      success: true,
      token,
      message: 'Contraseña actualizada correctamente',
    });
  } catch (error) {
    next(error);
  }
};

/**
 * @desc    Olvidé mi contraseña
 * @route   POST /api/auth/forgotpassword
 * @access  Public
 */
const forgotPassword = async (req, res, next) => {
  try {
    const user = await UserModelWithTypes.findOne({ email: req.body.email });

    if (!user) {
      return res.status(StatusCodes.NOT_FOUND).json({
        success: false,
        message: 'No se encontró ningún usuario con ese correo electrónico',
      });
    }

    // Obtener token de restablecimiento
    const resetToken = user.getResetPasswordToken();

    await user.save({ validateBeforeSave: false });

    // TODO: Enviar correo electrónico con el token

    res.status(StatusCodes.OK).json({
      success: true,
      message: 'Se ha enviado un correo electrónico con instrucciones',
      resetToken,
    });
  } catch (error) {
    next(error);
  }
};

/**
 * @desc    Restablecer contraseña
 * @route   PUT /api/auth/resetpassword/:resettoken
 * @access  Public
 */
const resetPassword = async (req, res, next) => {
  try {
    // Obtener usuario por token
    const user = await UserModelWithTypes.findOne({
      resetPasswordToken: req.params.resettoken,
      resetPasswordExpire: { $gt: Date.now() },
    });

    if (!user) {
      return res.status(StatusCodes.BAD_REQUEST).json({
        success: false,
        message: 'Token inválido o expirado',
      });
    }

    // Establecer nueva contraseña
    user.password = req.body.password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;

    await user.save();

    // Crear token
    const token = generateToken(user._id, user.tenantId, user.role);

    res.status(StatusCodes.OK).json({
      success: true,
      token,
      message: 'Contraseña restablecida correctamente',
    });
  } catch (error) {
    next(error);
  }
};

export {
  register,
  login,
  logout,
  getMe,
  updateDetails,
  updatePassword,
  forgotPassword,
  resetPassword,
};